$date
	Wed Jan 26 18:36:44 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var wire 32 " INSTRUCTION [31:0] $end
$var reg 1 # CLK $end
$var reg 1 $ RESET $end
$scope module mycpu $end
$var wire 1 # CLK $end
$var wire 32 % INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 1 & ZERO $end
$var wire 1 ' WRITE_ENABLE $end
$var wire 8 ( TWOS [7:0] $end
$var wire 1 ) SUB_SELECT $end
$var wire 8 * SUB_RESULT [7:0] $end
$var wire 8 + REGOUT2 [7:0] $end
$var wire 8 , REGOUT1 [7:0] $end
$var wire 32 - NEXTPC2 [31:0] $end
$var wire 32 . NEXTPC [31:0] $end
$var wire 1 / JUMP $end
$var wire 1 0 IMM_SELECT $end
$var wire 8 1 IMM_RESULT [7:0] $end
$var wire 32 2 B_MUX_OUT [31:0] $end
$var wire 1 3 BRANCH $end
$var wire 1 4 AND_OUT $end
$var wire 8 5 ALU_OUT [7:0] $end
$var wire 3 6 ALUOP [2:0] $end
$var wire 32 7 ADDR_OUT [31:0] $end
$var reg 32 8 PC [31:0] $end
$scope module a1 $end
$var wire 1 4 OUTPUT $end
$var wire 1 & INPUT2 $end
$var wire 1 3 INPUT1 $end
$upscope $end
$scope module adr $end
$var wire 32 9 FOUR [31:0] $end
$var wire 32 : PC [31:0] $end
$var wire 32 ; NEXTPC [31:0] $end
$upscope $end
$scope module alu $end
$var wire 3 < SELECT [2:0] $end
$var wire 8 = OR_OUT [7:0] $end
$var wire 8 > FORWARD_OUT [7:0] $end
$var wire 8 ? DATA2 [7:0] $end
$var wire 8 @ DATA1 [7:0] $end
$var wire 8 A AND_OUT [7:0] $end
$var wire 8 B ADD_OUT [7:0] $end
$var reg 8 C RESULT [7:0] $end
$var reg 1 & ZERO $end
$scope module add1 $end
$var wire 8 D DATA2 [7:0] $end
$var wire 8 E DATA1 [7:0] $end
$var wire 8 F ADD_OUT [7:0] $end
$upscope $end
$scope module and1 $end
$var wire 8 G AND_OUT [7:0] $end
$var wire 8 H DATA2 [7:0] $end
$var wire 8 I DATA1 [7:0] $end
$upscope $end
$scope module fwd1 $end
$var wire 8 J FORWARD_OUT [7:0] $end
$var wire 8 K DATA2 [7:0] $end
$upscope $end
$scope module or1 $end
$var wire 8 L OR_OUT [7:0] $end
$var wire 8 M DATA2 [7:0] $end
$var wire 8 N DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module branch_mux $end
$var wire 32 O INPUT1 [31:0] $end
$var wire 1 4 SELECT $end
$var wire 32 P INPUT2 [31:0] $end
$var reg 32 Q OUTPUT [31:0] $end
$upscope $end
$scope module for_sub $end
$var wire 8 R OUTPUT [7:0] $end
$var wire 8 S INPUT [7:0] $end
$upscope $end
$scope module immediate_or_reg $end
$var wire 8 T INPUT2 [7:0] $end
$var wire 1 0 SELECT $end
$var wire 8 U INPUT1 [7:0] $end
$var reg 8 V OUTPUT [7:0] $end
$upscope $end
$scope module jump_mux $end
$var wire 32 W INPUT1 [31:0] $end
$var wire 1 / SELECT $end
$var wire 32 X INPUT2 [31:0] $end
$var reg 32 Y OUTPUT [31:0] $end
$upscope $end
$scope module mucu $end
$var wire 8 Z OPCODE [7:0] $end
$var reg 3 [ ALUOP [2:0] $end
$var reg 1 3 BRANCH $end
$var reg 1 / JUMP $end
$var reg 1 0 MUXIMM $end
$var reg 1 ) MUXSUB $end
$var reg 1 ' WRITEENABLE $end
$upscope $end
$scope module myregfile $end
$var wire 1 # CLK $end
$var wire 8 \ IN [7:0] $end
$var wire 3 ] INADDRESS [2:0] $end
$var wire 8 ^ OUT1 [7:0] $end
$var wire 3 _ OUT1ADDRESS [2:0] $end
$var wire 8 ` OUT2 [7:0] $end
$var wire 3 a OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 ' WRITE $end
$upscope $end
$scope module na $end
$var wire 32 b CURRENT_ADDR [31:0] $end
$var wire 8 c OFFSET [7:0] $end
$var wire 32 d SHIFTED [31:0] $end
$var wire 32 e NEW_ADDR [31:0] $end
$var wire 32 f EXTENDED [31:0] $end
$upscope $end
$scope module select2s $end
$var wire 8 g INPUT1 [7:0] $end
$var wire 8 h INPUT2 [7:0] $end
$var wire 1 ) SELECT $end
$var reg 8 i OUTPUT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
b100 9
bx 8
bx 7
bx 6
bx 5
x4
x3
bx 2
bx 1
x0
x/
bx .
bx -
bx ,
bx +
bx *
x)
bx (
x'
x&
bx %
1$
0#
bx "
bx !
$end
#4
b0 !
b0 8
b0 :
1#
#5
b100 .
b100 ;
b100 O
b100 b
0$
#6
b100 2
b100 Q
b100 W
04
b0 5
b0 C
b0 \
0&
b101 1
b101 ?
b101 D
b101 H
b101 K
b101 M
b101 V
b10000 d
b0 Z
b100 ]
b0 _
b101 a
b101 T
b100 f
b100 c
b1000000000000000101 "
b1000000000000000101 %
#7
b100 -
b100 Y
b101 5
b101 C
b101 \
bx1x1 =
bx1x1 L
b0x0x A
b0x0x G
0/
03
1'
0)
b0 6
b0 <
b0 [
10
b101 >
b101 J
#8
b0 *
b0 U
b0 i
b10100 7
b10100 P
b10100 X
b10100 e
b0 ,
b0 @
b0 E
b0 I
b0 N
b0 ^
b0 +
b0 S
b0 `
b0 g
0#
#9
b101 =
b101 L
b0 A
b0 G
b0 (
b0 R
b0 h
#10
b101 B
b101 F
#12
1#
#13
b100 !
b100 8
b100 :
#14
b1000 -
b1000 Y
b1000 2
b1000 Q
b1000 W
b1000 .
b1000 ;
b1000 O
b1000 b
#15
1&
b0 1
b0 ?
b0 D
b0 H
b0 K
b0 M
b0 V
b110 Z
b10 ]
b0 a
b0 T
b1000 d
b10 f
b10 c
b110000000100000000000000000 "
b110000000100000000000000000 %
#16
b10100 -
b10100 Y
b0 5
b0 C
b0 \
b0 =
b0 L
1/
0'
x)
bx 6
bx <
bx [
x0
b0 >
b0 J
0#
#17
b10000 -
b10000 Y
b0 B
b0 F
b10000 7
b10000 P
b10000 X
b10000 e
#20
1#
#21
b10000 !
b10000 8
b10000 :
#22
b10100 2
b10100 Q
b10100 W
b10100 .
b10100 ;
b10100 O
b10100 b
#23
0&
b110 1
b110 ?
b110 D
b110 H
b110 K
b110 M
b110 V
b1 Z
b0 ]
b110 a
b110 T
b0 d
b0 f
b0 c
b1000000000000000000000110 "
b1000000000000000000000110 %
#24
1&
b10100 -
b10100 Y
b0 1
b0 ?
b0 D
b0 H
b0 K
b0 M
b0 V
b110 5
b110 C
b110 \
b110 =
b110 L
0/
1'
0)
b0 6
b0 <
b0 [
00
b110 >
b110 J
0#
#25
b0 5
b0 C
b0 \
b0 =
b0 L
b0 >
b0 J
b10100 7
b10100 P
b10100 X
b10100 e
#28
1#
#29
b10100 !
b10100 8
b10100 :
#30
b11000 -
b11000 Y
b11000 2
b11000 Q
b11000 W
b11000 .
b11000 ;
b11000 O
b11000 b
#31
b0 Z
b1 ]
b1 a
b1 T
b100 d
b1 f
b1 c
b10000000000000001 "
b10000000000000001 %
#32
0&
b1 1
b1 ?
b1 D
b1 H
b1 K
b1 M
b1 V
10
0#
#33
b1 5
b1 C
b1 \
b1 =
b1 L
b1 >
b1 J
b11100 7
b11100 P
b11100 X
b11100 e
#34
b1 B
b1 F
#36
1#
#37
b11000 !
b11000 8
b11000 :
#38
b11100 -
b11100 Y
b11100 2
b11100 Q
b11100 W
b11100 .
b11100 ;
b11100 O
b11100 b
#39
b1 *
b1 U
b1 i
b10 Z
b10 ]
b10 _
b1000 d
b10 f
b10 c
b1 +
b1 S
b1 `
b1 g
b10000000100000001000000001 "
b10000000100000001000000001 %
#40
b1 6
b1 <
b1 [
00
b11111111 (
b11111111 R
b11111111 h
0#
#41
b100100 7
b100100 P
b100100 X
b100100 e
#44
1#
#45
b11100 !
b11100 8
b11100 :
#46
b100000 -
b100000 Y
b100000 2
b100000 Q
b100000 W
b100000 .
b100000 ;
b100000 O
b100000 b
#47
1&
bx Z
bx ]
bx _
bx a
bx T
bx d
bx f
bx c
b1 ,
b1 @
b1 E
b1 I
b1 N
b1 ^
bx "
bx %
#48
0&
04
b11111111 *
b11111111 U
b11111111 i
bx 1
bx ?
bx D
bx H
bx K
bx M
bx V
b0 5
b0 C
b0 \
x/
x3
0'
x)
bx 6
bx <
bx [
x0
b1 A
b1 G
0#
#49
bx1 =
bx1 L
b0x A
b0x G
bx >
bx J
bx ,
bx @
bx E
bx I
bx N
bx ^
bx +
bx S
bx `
bx g
bx 7
bx P
bx X
bx e
#50
bx *
bx U
bx i
bx =
bx L
bx A
bx G
bx (
bx R
bx h
bx B
bx F
#52
1#
#53
b100000 !
b100000 8
b100000 :
#54
b100100 2
b100100 Q
b100100 W
b100100 .
b100100 ;
b100100 O
b100100 b
#56
0#
#60
1#
#64
0#
#68
1#
#72
0#
1$
#74
0$
#76
1#
#80
0#
#84
1#
#88
0#
#92
1#
#96
0#
#100
1#
#104
0#
#108
1#
#112
0#
#116
1#
#120
0#
#124
1#
#128
0#
#132
1#
#136
0#
#140
1#
#144
0#
#148
1#
#152
0#
#156
1#
#160
0#
#164
1#
#168
0#
#172
1#
#176
0#
#180
1#
#184
0#
#188
1#
#192
0#
#196
1#
#200
0#
#204
1#
#208
0#
#212
1#
#216
0#
#220
1#
#224
0#
#228
1#
#232
0#
#236
1#
#240
0#
#244
1#
#248
0#
#252
1#
#256
0#
#260
1#
#264
0#
#268
1#
#272
0#
#276
1#
#280
0#
#284
1#
#288
0#
#292
1#
#296
0#
#300
1#
#304
0#
#308
1#
#312
0#
#316
1#
#320
0#
#324
1#
#328
0#
#332
1#
#336
0#
#340
1#
#344
0#
#348
1#
#352
0#
#356
1#
#360
0#
#364
1#
#368
0#
#372
1#
#376
0#
#380
1#
#384
0#
#388
1#
#392
0#
#396
1#
#400
0#
#404
1#
#408
0#
#412
1#
#416
0#
#420
1#
#424
0#
#428
1#
#432
0#
#436
1#
#440
0#
#444
1#
#448
0#
#452
1#
#456
0#
#460
1#
#464
0#
#468
1#
#472
0#
#476
1#
#480
0#
#484
1#
#488
0#
#492
1#
#496
0#
#500
1#
#504
0#
#508
1#
#512
0#
#516
1#
#520
0#
#524
1#
#528
0#
#532
1#
#536
0#
#540
1#
#544
0#
#548
1#
#552
0#
#556
1#
#560
0#
#564
1#
#568
0#
#572
1#
#574
