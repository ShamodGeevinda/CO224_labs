$date
	Fri Feb  4 11:00:34 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var wire 32 " INSTRUCTION [31:0] $end
$var reg 1 # CLK $end
$var reg 1 $ RESET $end
$scope module mycpu $end
$var wire 1 # CLK $end
$var wire 32 % INSTRUCTION [31:0] $end
$var wire 1 & OR_OUT $end
$var wire 1 $ RESET $end
$var wire 1 ' ZERO $end
$var wire 1 ( WRITE_ENABLE $end
$var wire 8 ) TWOS [7:0] $end
$var wire 1 * SUB_SELECT $end
$var wire 8 + SUB_RESULT [7:0] $end
$var wire 8 , REGOUT2 [7:0] $end
$var wire 8 - REGOUT1 [7:0] $end
$var wire 32 . NEXTPC2 [31:0] $end
$var wire 32 / NEXTPC [31:0] $end
$var wire 1 0 JUMP $end
$var wire 1 1 IMM_SELECT $end
$var wire 8 2 IMM_RESULT [7:0] $end
$var wire 1 3 BRANCH $end
$var wire 1 4 AND_OUT $end
$var wire 8 5 ALU_OUT [7:0] $end
$var wire 3 6 ALUOP [2:0] $end
$var wire 32 7 ADDR_OUT [31:0] $end
$var reg 32 8 PC [31:0] $end
$scope module a1 $end
$var wire 1 4 OUTPUT $end
$var wire 1 ' INPUT2 $end
$var wire 1 3 INPUT1 $end
$upscope $end
$scope module adr $end
$var wire 32 9 FOUR [31:0] $end
$var wire 32 : PC [31:0] $end
$var wire 32 ; NEXTPC [31:0] $end
$upscope $end
$scope module alu $end
$var wire 1 ' ZERO $end
$var wire 3 < SELECT [2:0] $end
$var wire 8 = OR_OUT [7:0] $end
$var wire 8 > FORWARD_OUT [7:0] $end
$var wire 8 ? DATA2 [7:0] $end
$var wire 8 @ DATA1 [7:0] $end
$var wire 8 A AND_OUT [7:0] $end
$var wire 8 B ADD_OUT [7:0] $end
$var reg 8 C RESULT [7:0] $end
$scope module add1 $end
$var wire 8 D DATA2 [7:0] $end
$var wire 8 E DATA1 [7:0] $end
$var wire 8 F ADD_OUT [7:0] $end
$upscope $end
$scope module and1 $end
$var wire 8 G AND_OUT [7:0] $end
$var wire 8 H DATA2 [7:0] $end
$var wire 8 I DATA1 [7:0] $end
$upscope $end
$scope module fwd1 $end
$var wire 8 J FORWARD_OUT [7:0] $end
$var wire 8 K DATA2 [7:0] $end
$upscope $end
$scope module or1 $end
$var wire 8 L OR_OUT [7:0] $end
$var wire 8 M DATA2 [7:0] $end
$var wire 8 N DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module for_sub $end
$var wire 8 O OUTPUT [7:0] $end
$var wire 8 P INPUT [7:0] $end
$upscope $end
$scope module immediate_or_reg $end
$var wire 8 Q INPUT2 [7:0] $end
$var wire 1 1 SELECT $end
$var wire 8 R INPUT1 [7:0] $end
$var reg 8 S OUTPUT [7:0] $end
$upscope $end
$scope module jump_mux $end
$var wire 32 T INPUT1 [31:0] $end
$var wire 1 0 SELECT $end
$var wire 32 U INPUT2 [31:0] $end
$var reg 32 V OUTPUT [31:0] $end
$upscope $end
$scope module mucu $end
$var wire 8 W OPCODE [7:0] $end
$var reg 3 X ALUOP [2:0] $end
$var reg 1 3 BRANCH $end
$var reg 1 0 JUMP $end
$var reg 1 1 MUXIMM $end
$var reg 1 * MUXSUB $end
$var reg 1 ( WRITEENABLE $end
$upscope $end
$scope module myregfile $end
$var wire 1 # CLK $end
$var wire 8 Y IN [7:0] $end
$var wire 3 Z INADDRESS [2:0] $end
$var wire 8 [ OUT1 [7:0] $end
$var wire 3 \ OUT1ADDRESS [2:0] $end
$var wire 8 ] OUT2 [7:0] $end
$var wire 3 ^ OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 ( WRITE $end
$upscope $end
$scope module na $end
$var wire 32 _ CURRENT_ADDR [31:0] $end
$var wire 8 ` OFFSET [7:0] $end
$var wire 32 a SHIFTED [31:0] $end
$var wire 32 b NEW_ADDR [31:0] $end
$var wire 32 c EXTENDED [31:0] $end
$upscope $end
$scope module select2s $end
$var wire 8 d INPUT1 [7:0] $end
$var wire 8 e INPUT2 [7:0] $end
$var wire 1 * SELECT $end
$var reg 8 f OUTPUT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
b100 9
bx 8
bx 7
bx 6
bx 5
x4
x3
bx 2
x1
x0
bx /
bx .
bx -
bx ,
bx +
x*
bx )
x(
x'
x&
bx %
1$
0#
bx "
bx !
$end
#4
b0 !
b0 8
b0 :
1#
#5
b100 /
b100 ;
b100 T
b100 _
0$
#6
b10000 a
b0 W
b100 Z
b0 \
b101 ^
b101 Q
b100 c
b100 `
b1000000000000000101 "
b1000000000000000101 %
#7
0&
b100 .
b100 V
04
b101 2
b101 ?
b101 D
b101 H
b101 K
b101 M
b101 S
00
03
1(
0*
b0 6
b0 <
b0 X
11
#8
0'
b101 5
b101 C
b101 Y
b0 +
b0 R
b0 f
bx1x1 =
bx1x1 L
b0x0x A
b0x0x G
b101 >
b101 J
b10100 7
b10100 U
b10100 b
b0 -
b0 @
b0 E
b0 I
b0 N
b0 [
b0 ,
b0 P
b0 ]
b0 d
0#
#9
b101 =
b101 L
b0 A
b0 G
b0 )
b0 O
b0 e
#10
b101 B
b101 F
#12
1#
#13
b100 !
b100 8
b100 :
#14
b1000 .
b1000 V
b1000 /
b1000 ;
b1000 T
b1000 _
#15
b101 Z
b10100 a
b101 c
b101 `
b1010000000000000101 "
b1010000000000000101 %
#16
0#
#17
b11100 7
b11100 U
b11100 b
#20
1#
#21
b1000 !
b1000 8
b1000 :
#22
b1100 .
b1100 V
b1100 /
b1100 ;
b1100 T
b1100 _
#23
b0 2
b0 ?
b0 D
b0 H
b0 K
b0 M
b0 S
b101 +
b101 R
b101 f
b110 W
b10 Z
b0 ^
b0 Q
b1000 a
b10 c
b10 `
b101 ,
b101 P
b101 ]
b101 d
b110000000100000000000000000 "
b110000000100000000000000000 %
#24
1'
1&
b11100 .
b11100 V
b0 5
b0 C
b0 Y
b0 =
b0 L
10
0(
x*
bx 6
bx <
bx X
x1
b0 >
b0 J
b11111011 )
b11111011 O
b11111011 e
0#
#25
b10100 .
b10100 V
b0 B
b0 F
b0 ,
b0 P
b0 ]
b0 d
b10100 7
b10100 U
b10100 b
#26
b0 )
b0 O
b0 e
#28
1#
#29
b10100 !
b10100 8
b10100 :
#30
b11000 /
b11000 ;
b11000 T
b11000 _
#31
b1 W
b0 Z
b110 ^
b110 Q
b0 a
b0 c
b0 `
b1000000000000000000000110 "
b1000000000000000000000110 %
#32
0&
b11000 .
b11000 V
b0 +
b0 R
b0 f
b0 2
b0 ?
b0 D
b0 H
b0 K
b0 M
b0 S
00
1(
0*
b0 6
b0 <
b0 X
01
0#
#33
b11000 7
b11000 U
b11000 b
#36
1#
#37
b11000 !
b11000 8
b11000 :
#38
b11100 .
b11100 V
b11100 /
b11100 ;
b11100 T
b11100 _
#39
b111 W
b110 Z
b100 \
b101 ^
b101 Q
b11111111111111111111111111111000 a
b11111111111111111111111111111110 c
b11111110 `
b111111111100000010000000101 "
b111111111100000010000000101 %
#40
1&
14
13
0(
1*
0#
#41
b101 -
b101 @
b101 E
b101 I
b101 N
b101 [
b101 ,
b101 P
b101 ]
b101 d
b10100 7
b10100 U
b10100 b
#42
b11111011 2
b11111011 ?
b11111011 D
b11111011 H
b11111011 K
b11111011 M
b11111011 S
b11111011 +
b11111011 R
b11111011 f
b101 =
b101 L
b11111011 )
b11111011 O
b11111011 e
#43
0&
04
0'
b11111011 5
b11111011 C
b11111011 Y
b11111111 =
b11111111 L
b1 A
b1 G
b11111011 >
b11111011 J
#44
1#
#45
b11100 !
b11100 8
b11100 :
#46
b100000 .
b100000 V
b100000 /
b100000 ;
b100000 T
b100000 _
#47
b0 W
b1 Z
b0 \
b1 ^
b1 Q
b100 a
b1 c
b1 `
b10000000000000001 "
b10000000000000001 %
#48
b101 +
b101 R
b101 f
b1 2
b1 ?
b1 D
b1 H
b1 K
b1 M
b1 S
03
1(
0*
11
0#
#49
b1 5
b1 C
b1 Y
b0 +
b0 R
b0 f
b101 =
b101 L
b1 >
b1 J
b0 -
b0 @
b0 E
b0 I
b0 N
b0 [
b0 ,
b0 P
b0 ]
b0 d
b100100 7
b100100 U
b100100 b
#50
b1 =
b1 L
b0 A
b0 G
b0 )
b0 O
b0 e
#51
b1 B
b1 F
#52
1#
#53
b100000 !
b100000 8
b100000 :
#54
b100100 .
b100100 V
b100100 /
b100100 ;
b100100 T
b100100 _
#55
b1 +
b1 R
b1 f
b10 W
b10 Z
b10 \
b1000 a
b10 c
b10 `
b1 ,
b1 P
b1 ]
b1 d
b10000000100000001000000001 "
b10000000100000001000000001 %
#56
b1 6
b1 <
b1 X
01
b11111111 )
b11111111 O
b11111111 e
0#
#57
b101100 7
b101100 U
b101100 b
#60
1#
#61
b100100 !
b100100 8
b100100 :
#62
b101000 .
b101000 V
b101000 /
b101000 ;
b101000 T
b101000 _
#63
bx W
bx Z
bx \
bx ^
bx Q
bx a
bx c
bx `
b1 -
b1 @
b1 E
b1 I
b1 N
b1 [
bx "
bx %
#64
x4
1'
x&
b0 5
b0 C
b0 Y
x0
x3
0(
x*
bx 6
bx <
bx X
x1
b1 A
b1 G
0#
#65
bx -
bx @
bx E
bx I
bx N
bx [
bx ,
bx P
bx ]
bx d
bx 7
bx U
bx b
b10 B
b10 F
#66
bx1 =
bx1 L
b0x A
b0x G
bx )
bx O
bx e
#67
bx B
bx F
#68
1#
#69
b101000 !
b101000 8
b101000 :
#70
b101100 /
b101100 ;
b101100 T
b101100 _
#72
0#
1$
#74
0$
#76
1#
#80
0#
#84
1#
#88
0#
#92
1#
#96
0#
#100
1#
#104
0#
#108
1#
#112
0#
#116
1#
#120
0#
#124
1#
#128
0#
#132
1#
#136
0#
#140
1#
#144
0#
#148
1#
#152
0#
#156
1#
#160
0#
#164
1#
#168
0#
#172
1#
#176
0#
#180
1#
#184
0#
#188
1#
#192
0#
#196
1#
#200
0#
#204
1#
#208
0#
#212
1#
#216
0#
#220
1#
#224
0#
#228
1#
#232
0#
#236
1#
#240
0#
#244
1#
#248
0#
#252
1#
#256
0#
#260
1#
#264
0#
#268
1#
#272
0#
#276
1#
#280
0#
#284
1#
#288
0#
#292
1#
#296
0#
#300
1#
#304
0#
#308
1#
#312
0#
#316
1#
#320
0#
#324
1#
#328
0#
#332
1#
#336
0#
#340
1#
#344
0#
#348
1#
#352
0#
#356
1#
#360
0#
#364
1#
#368
0#
#372
1#
#376
0#
#380
1#
#384
0#
#388
1#
#392
0#
#396
1#
#400
0#
#404
1#
#408
0#
#412
1#
#416
0#
#420
1#
#424
0#
#428
1#
#432
0#
#436
1#
#440
0#
#444
1#
#448
0#
#452
1#
#456
0#
#460
1#
#464
0#
#468
1#
#472
0#
#476
1#
#480
0#
#484
1#
#488
0#
#492
1#
#496
0#
#500
1#
#504
0#
#508
1#
#512
0#
#516
1#
#520
0#
#524
1#
#528
0#
#532
1#
#536
0#
#540
1#
#544
0#
#548
1#
#552
0#
#556
1#
#560
0#
#564
1#
#568
0#
#572
1#
#574
